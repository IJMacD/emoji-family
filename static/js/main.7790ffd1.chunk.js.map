{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","adults","setAdults","children","setChildren","skin","setSkin","hair","className","join","map","p","i","onClick","filter","_","j","style","display","justifyContent","c","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAyDeA,MAnDf,WAAgB,IAAD,EACiBC,IAAMC,SAAS,CAAC,eAAM,iBADvC,mBACLC,EADK,KACGC,EADH,OAEqBH,IAAMC,SAAS,IAFpC,mBAELG,EAFK,KAEKC,EAFL,OAIaL,IAAMC,SAAS,IAJ5B,mBAILK,EAJK,KAICC,EAJD,OAKaP,IAAMC,SAAS,IAL5B,mBAKLO,EALK,KAOb,OAPa,KAQX,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,4CACA,yBAAKA,UAAU,gBAAgB,sBAAIP,GAAJ,YAAeE,IAAUM,KAAK,YAE/D,6BACE,6BAASD,UAAU,mBACjB,uCACA,yBAAKA,UAAU,gBACb,sCACA,2BAAIP,EAAOS,KAAI,SAACC,EAAEC,GAAH,OAAS,0BAAMC,QAAS,kBAAMX,EAAUD,EAAOa,QAAO,SAACC,EAAEC,GAAH,OAASJ,IAAMI,QAAML,QAE5F,yBAAKH,UAAU,gBACb,wCACA,2BAAIL,EAASO,KAAI,SAACC,EAAGC,GAAJ,OAAU,0BAAMC,QAAS,kBAAMT,EAAYD,EAASW,QAAO,SAACC,EAAEC,GAAH,OAASJ,IAAMI,QAAML,SAGrG,6BAASH,UAAU,eACjB,2CACA,2BACE,4BAAQK,QAAS,kBAAMX,EAAU,GAAD,mBAAKD,GAAL,CAAa,eAAOI,EAAOE,OAA3D,sBAAyEF,GAAzE,OAAgFE,IAChF,4BAAQM,QAAS,kBAAMX,EAAU,GAAD,mBAAKD,GAAL,CAAa,eAAOI,EAAOE,OAA3D,sBAAyEF,GAAzE,OAAgFE,IAChF,4BAAQM,QAAS,kBAAMT,EAAY,GAAD,mBAAKD,GAAL,CAAe,eAAOE,EAAOE,OAA/D,sBAA6EF,GAA7E,OAAoFE,IACpF,4BAAQM,QAAS,kBAAMT,EAAY,GAAD,mBAAKD,GAAL,CAAe,eAAOE,EAAOE,OAA/D,sBAA6EF,GAA7E,OAAoFE,KAEtF,uBAAGU,MAAO,CAACC,QAAQ,OAAOC,eAAe,WACvC,4BAAQN,QAAS,kBAAMP,EAAQ,MAA/B,WAEE,YAvCS,gEAuCWI,KAAI,SAAAU,GAAC,OAAI,4BAAQP,QAAS,kBAAMP,EAAQc,KAAKA,WC9B3DC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7790ffd1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst SKIN_MODIFIERS = \"\\u{1f3fb}\\u{1f3fc}\\u{1f3fd}\\u{1f3fe}\\u{1f3ff}\";\nconst HAIR_MODIFIERS = \"\\u{1f9b0}\\u{1f9b1}\\u{1f9b2}\\u{1f9b3}\";\n\nfunction App() {\n  const [ adults, setAdults ] = React.useState([\"ðŸ‘©\", \"ðŸ‘¨\"]);\n  const [ children, setChildren ] = React.useState([]);\n\n  const [ skin, setSkin ] = React.useState(\"\");\n  const [ hair, setHair ] = React.useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Emoji Family</h1>\n        <div className=\"emoji-family\">{[...adults, ...children].join(\"\\u200d\")}</div>\n      </header>\n      <div>\n        <section className=\"section-members\">\n          <h1>Members</h1>\n          <div className=\"members-list\">\n            <h2>Adults</h2>\n            <p>{adults.map((p,i) => <span onClick={() => setAdults(adults.filter((_,j) => i !== j))}>{p}</span>)}</p>\n          </div>\n          <div className=\"members-list\">\n            <h2>Children</h2>\n            <p>{children.map((p, i) => <span onClick={() => setChildren(children.filter((_,j) => i !== j))}>{p}</span>)}</p>\n          </div>\n        </section>\n        <section className=\"section-add\">\n          <h1>Add Members</h1>\n          <p>\n            <button onClick={() => setAdults([...adults, \"ðŸ‘¨\" + skin + hair])}>{`ðŸ‘¨${skin}${hair}`}</button>\n            <button onClick={() => setAdults([...adults, \"ðŸ‘©\" + skin + hair])}>{`ðŸ‘©${skin}${hair}`}</button>\n            <button onClick={() => setChildren([...children, \"ðŸ‘¦\" + skin + hair])}>{`ðŸ‘¦${skin}${hair}`}</button>\n            <button onClick={() => setChildren([...children, \"ðŸ‘§\" + skin + hair])}>{`ðŸ‘§${skin}${hair}`}</button>\n          </p>\n          <p style={{display:\"flex\",justifyContent:\"center\"}}>\n            <button onClick={() => setSkin(\"\")}>Default</button>\n            {\n              [...SKIN_MODIFIERS].map(c => <button onClick={() => setSkin(c)}>{c}</button>)\n            }\n          </p>\n          {/* <p style={{display:\"flex\",justifyContent:\"center\"}}>\n            <button onClick={() => setHair(\"\")}>Default</button>\n            {\n              [...HAIR_MODIFIERS].map(c => <button onClick={() => setHair(\"\\u200d\" + c)}>{c}</button>)\n            }\n          </p> */}\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}